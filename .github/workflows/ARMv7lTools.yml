name: Build Static ARMv7l Tools (safe)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  TARGET_ARCH: armv7l
  MUSL_CROSS: arm-linux-musleabi  
  SAFE_CFLAGS: "-march=armv5te -mno-unaligned-access -msoft-float -mfloat-abi=soft -mtune=generic-armv7-a -D__SOFTFP__ -nostdlib"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Install toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools file
          wget https://musl.cc/${MUSL_CROSS}-cross.tgz
          tar -xzf ${MUSL_CROSS}-cross.tgz -C /opt
          echo "/opt/${MUSL_CROSS}-cross/bin" >> $GITHUB_PATH

      - name: Build BusyBox (safe mode)
        run: |
          wget https://busybox.net/downloads/busybox-1.36.1.tar.bz2
          tar -xf busybox-1.36.1.tar.bz2
          cd busybox-1.36.1
          make defconfig
          # 关键修复点
          sed -i "s/^CONFIG_STATIC=.*/CONFIG_STATIC=y/" .config
          sed -i "s/^CONFIG_EXTRA_CFLAGS=.*/CONFIG_EXTRA_CFLAGS=\"${SAFE_CFLAGS}\"/" .config
          sed -i "s/^CONFIG_EXTRA_LDLIBS=.*/CONFIG_EXTRA_LDLIBS=\"-lgcc_eh -lgcc\"/" .config
          # 显式指定所有编译参数
          make -j$(nproc) \
            CC="${MUSL_CROSS}-gcc" \
            CFLAGS="${SAFE_CFLAGS} -static" \
            LDFLAGS="${SAFE_CFLAGS} -static" \
            ARCH=arm \
            CROSS_COMPILE=${MUSL_CROSS}-
          ${MUSL_CROSS}-strip busybox

      - name: Build Dropbear (safe mode)
        run: |
          wget https://matt.ucc.asn.au/dropbear/releases/dropbear-2022.83.tar.bz2
          tar -xf dropbear-2022.83.tar.bz2
          cd dropbear-2022.83
          
          # 应用源码补丁
          sed -i 's/char \*basename(const char\* path);/char *basename(char *path) __attribute__((__nonnull__ (1)));/g' compat.h
          sed -i 's/#if DROPBEAR_SVR_PASSWORD_AUTH && !HAVE_CRYPT/#if 0/' sysoptions.h

          # 配置参数调整
          ./configure \
            --host=${MUSL_CROSS} \
            --enable-static \
            --disable-zlib \
            --disable-pam \
            --disable-syslog \
            --disable-password-auth \
            CFLAGS="${SAFE_CFLAGS} -static -DHAVE_CRYPT=0 -DBASENAME_COMPAT" \
            LDFLAGS="-static -Wl,--as-needed"

          # 强制指定编译工具
          make -j$(nproc) \
            PROGRAMS="dropbear dbclient dropbearkey" \
            CC="${MUSL_CROSS}-gcc" \
            STRIP="${MUSL_CROSS}-strip"

      - name: Verify binaries
        run: |
          echo "=== Binary Compatibility Report ===" > xx_check.log
          echo "Target Platform: ARMv7 (no VFP/NEON)" >> xx_check.log
          echo "Compiler Flags: ${SAFE_CFLAGS}" >> xx_check.log
          cat /proc/cpuinfo >> xx_check.log
          echo "--- BusyBox ---" >> xx_check.log
          cat busybox_check.log >> xx_check.log
          echo "--- Dropbear ---" >> xx_check.log
          cat dropbear_check.log >> xx_check.log
          echo "================================" >> xx_check.log
          # 严格检查
          ! grep -q "VFP" xx_check.log || (echo "VFP detected in binaries!" && exit 1)
          grep -q "statically linked" xx_check.log || (echo "Static linking check failed!" && exit 1)

      - name: Package artifacts
        run: |
          mkdir -p release/bin
          cp busybox-1.36.1/busybox release/bin/
          cp dropbear-2022.83/dropbear release/bin/
          cp dropbear-2022.83/dbclient release/bin/
          cp dropbear-2022.83/dropbearkey release/bin/
          tar -czvf ${TARGET_ARCH}-safe-tools.tar.gz -C release .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${TARGET_ARCH}-artifacts
          path: |
            ${TARGET_ARCH}-safe-tools.tar.gz
            xx_check.log

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${TARGET_ARCH}-safe-tools.tar.gz
            xx_check.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
